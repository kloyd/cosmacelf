                        ;******************************************
                        ;
                        ; TIL - Threaded Interpretive Language
                        ;   1802 Implementation
                        ;   2023 Kelly S. Loyd
                        ;
                        ;******************************************
                        
                        ; Register list
                        ; I = Instruction Register - Address of next Instruction in threaded list of current secondary.
                        ; WA = Word Address Register - Word address of current keyword.
                        ; CA = Code Address register
                        ; RS = Return Stack
                        ; SP = Stack Pointer
                        ; PC = Program Conter
                        
                        ; 1802 register map
                        ; Monitor uses R1, R2, R3, R4, R5, R7, RE
   0003                 SCRTPC	EQU	$03
   0004                 CALLR	EQU	$04
   0005                 RETR	EQU	$05
   0007                 TXTOUT	EQU	$07
   0007                 VAR	EQU	$07	; dual use, variable pointer or text message pointer.
                        
                        ; P-REGISTERS
   0008                 I	EQU	$08
   0009                 WA	EQU	$09
   000A                 CA	EQU	$0A
   000C                 RS	EQU	$0C
   000D                 SP	EQU	$0D
   000F                 PC	EQU	$0F
   0006                 NXT	EQU	$06	; Location of NEXT routine.
                        
                        ; Set at 0x8000 - RAM starts here on MC with ROM at 0x0000
   8000                 	ORG	$8000	
                        
                        ; variables
   8000   00            BASE	DB	0
   8001   00            MODE	DB	0
   8002   00 00         LBEND	DW	0
                        
   FFBF                 UserStack EQU 0FFBFH
                        ;; SCRT routine locations Standard ROM org'd at 0
   0ADB                 CALL	EQU 0ADBH
   0AED                 RETURN	EQU 0AEDH
                        ; I/O ROUTINES
   0526                 OUTSTR	EQU 0526H
                        ;The Monitor "INPUT" routine is at 8005hex in the ORG'ed 8000hex Monitor
                        ;The inputted character is returned in RB.0
   000B                 INDATA	EQU 11
   0005                 INCHR	EQU 0005H
                        ;;The Monitor "OUTPUT" routine is at 821Dhex in the ORG'ed 8000hex Monitor
                        ;;The character to be outputted is stored in RB.0
   021D                 OUTCHR	EQU 021DH
                        
                        
                        ; Setup for SCRT
   8004   F8 80 B3 F8   	LOAD	SCRTPC, START
   8008   0B A3         
   800A   D3            	SEP SCRTPC
                        	
                        ; START/RESTART
   800B   F8 0A B4 F8   START	LOAD CALLR, CALL
   800F   DB A4         
   8011   F8 0A B5 F8   	LOAD RETR, RETURN
   8015   ED A5         
                        	
   8017   F8 80 B7 F8   	LOAD TXTOUT, STRMSG
   801B   66 A7         
   801D   F8 80 B7 F8   	LOAD VAR, BASE
   8021   00 A7         
   8023   07            	LDN VAR
   8024   FA FF         	ANI	$FF
   8026   32 2B         	BZ	ABORT
   8028   F8 0A         	LDI	10
   802A   57            	STR VAR
   802B                 ABORT	; set stack
                        
                        ;
                        ; TIL code for Inner Interpreter
                        ; All the VM code (Pseudo-Code) is commented with ;
                        ; the addresses are based on ORG $100
                        ; Save the location of NEXT into NXT register
   802B   F8 80 B6 F8   	LOAD NXT, NEXT
   802F   39 A6         
                        ;
                        ;SEMI	LA	;Link Address
   8031   80 33         SEMI	DW	$+2	; This funny notation means put the address of SEMI+2 into the code here.
                        			; It forms the Link Address used to connect dictonary entries.
                        ;POP RS -> I
                        ; POP : M(RS) copied to I register, RS=RS+2
                        ; *IMPORTANT* Endian-ness.. Push to stack pushes low order, dec sp, pushes high order, dec sp
                        ; Pop from stack pops high order, inc sp, pop low order, inc sp
   8033   0C            	LDN RS  ; take byte at M(RS), copy to D (accumulator)
   8034   B8            	PHI I   ; put D into I High 
   8035   1C            	INC RS	; RS++
   8036   0C            	LDN RS	; take byte at M(RS), copy to D
   8037   A8            	PLO I	; put D into I Low.
   8038   1C            	INC RS  ; RS++
                        	
                        ; NEXT entry point - fetch the NEXT word address and execute it.
                        ;NEXT	@I -> WA   ; M(I) -> WA.H, I++, M(I) -> WA.L, I++
   8039   08            NEXT	LDN I
   803A   B9            	PHI WA
   803B   18            	INC I
   803C   08            	LDN I
   803D   A9            	PLO WA
   803E   18            	INC I
                        ;	I = I + 2 ;; implied during the fetch.
                        ;RUN	@WA -> CA
   803F   09            RUN	LDN WA
   8040   BA            	PHI CA
   8041   19            	INC WA
   8042   09            	LDN WA
   8043   AA            	PLO CA
   8044   19            	INC WA
                        ;	WA = WA + 2 (Implied with 2x INC WA above)
                        ;	CA -> PC
   8045   9A            	GHI CA
   8046   BF            	PHI PC
   8047   8A            	GLO CA
   8048   AF            	PLO PC
                        	; setting the program counter will jump to the primitive.
                        	; When the routine completes, it should SEP NXT
                        	; Causing the called routine to return to the NEXT
                        	; Entry Point
   8049   DF            	SEP PC
                        ;COLON	PSH I -> RS
   804A   2C            COLON	DEC RS
   804B   88            	GLO I
   804C   5C            	STR RS
   804D   2C            	DEC RS
   804E   98            	GHI I
   804F   5C            	STR RS
                        ;	WA -> I
   8050   89            	GLO WA
   8051   A8            	PLO I
   8052   99            	GHI WA
   8053   B8            	PHI I
                        ;	JMP NEXT ; should be in a register for SEP instruction.
   8054   30 39         	BR NEXT
                        
                        ;	7E
                        ;	XE
                        ;	LA  ; Link Address to Next dictionary entry.
                        ;	EXECUTE	LA
                        ;	Dictionary Entry.
   8056   07 45 58 45   	DB 7,'E','X','E'
   805A   00 00         	DW 0
   805C   80 5E         EXECUTE	DW $+2
                        ;	POP SP -> WA
                        ; Pop from stack pops high order, inc sp, pop low order, inc sp
   805E   0D            	LDN SP  ; take byte at M(RS), copy to D (accumulator)
   805F   B9            	PHI WA   ; put D into I High 
   8060   1D            	INC SP	; RS++
   8061   0D            	LDN SP	; take byte at M(RS), copy to D
   8062   A9            	PLO WA	; put D into I Low.
   8063   1D            	INC SP  ; RS++
                        ;	JMP RUN
   8064   30 3F         	BR RUN
                        
                        
                        	; Cold start
   8066   48 65 6C 6C   STRMSG	TEXT "Hello, I'm a TIL."
   806A   6F 2C 20 49   
   806E   27 6D 20 61   
   8072   20 54 49 4C   
   8076   2E            
   8077   00            	BYTE 0
                        
   8078   54 49 4C 20   RSTMSG	TEXT "TIL Reset"
   807C   52 65 73 65   
   8080   74            
   8081   00            	BYTE 0
                        	
   8082                 	END
802b  ABORT         8000  BASE          000a  CA            0adb  CALL      
0004  CALLR         804a  COLON         805c  EXECUTE       0008  I         
0005  INCHR         000b  INDATA        8002  LBEND         8001  MODE      
8039  NEXT          0006  NXT           021d  OUTCHR        0526  OUTSTR    
000f  PC            0005  RETR          0aed  RETURN        000c  RS        
8078  RSTMSG        803f  RUN           0003  SCRTPC        8031  SEMI      
000d  SP            800b  START         8066  STRMSG        0007  TXTOUT    
ffbf  UserStack     0007  VAR           0009  WA            
