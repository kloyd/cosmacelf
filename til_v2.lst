                        ;******************************************
                        ;
                        ; TIL - Threaded Interpretive Language
                        ;   1802 Implementation
                        ;   2023 Kelly S. Loyd
                        ;
                        ;******************************************
                        
                        ; Register list
                        ; I = Instruction Register - Address of next Instruction in threaded list of current secondary.
                        ; WA = Word Address Register - Word address of current keyword.
                        ; CA = Code Address register
                        ; RS = Return Stack
                        ; SP = Stack Pointer
                        ; PC = Program Conter
                        
                        ; 1802 register map
                        ; Monitor uses R1, R2, R3, R4, R5, R7, RE
                        
   0008                 I	EQU	$08
   0009                 WA	EQU	$09
   000A                 CA	EQU	$0A
   000C                 RS	EQU	$0C
   000D                 SP	EQU	$0D
   000F                 PC	EQU	$0F
   0006                 NXT	EQU	$06	; Location of NEXT routine.
                        
                        ; Set at 0x8000 - RAM starts here on MC with ROM at 0x0000
   8000                 	ORG	$8000	
                        
                        ;
                        ; TIL code for Inner Interpreter
                        ; All the VM code (Pseudo-Code) is commented with ;
                        ; the addresses are based on ORG $100
                        ; Save the location of NEXT into NXT register
   8000   F8 80 B6 F8   	LOAD NXT, NEXT
   8004   0E A6         
                        ;
                        ;SEMI	LA	;Link Address
   8006   80 08         SEMI	DW	$+2	; This funny notation means put the address of SEMI+2 into the code here.
                        			; It forms the Link Address used to connect dictonary entries.
                        ;POP RS -> I
                        ; POP : M(RS) copied to I register, RS=RS+2
                        ; *IMPORTANT* Endian-ness.. Push to stack pushes low order, dec sp, pushes high order, dec sp
                        ; Pop from stack pops high order, inc sp, pop low order, inc sp
   8008   0C            	LDN RS  ; take byte at M(RS), copy to D (accumulator)
   8009   B8            	PHI I   ; put D into I High 
   800A   1C            	INC RS	; RS++
   800B   0C            	LDN RS	; take byte at M(RS), copy to D
   800C   A8            	PLO I	; put D into I Low.
   800D   1C            	INC RS  ; RS++
                        	
                        ; NEXT entry point - fetch the NEXT word address and execute it.
                        ;NEXT	@I -> WA   ; M(I) -> WA.H, I++, M(I) -> WA.L, I++
   800E   08            NEXT	LDN I
   800F   B9            	PHI WA
   8010   18            	INC I
   8011   08            	LDN I
   8012   A9            	PLO WA
   8013   18            	INC I
                        ;	I = I + 2 ;; implied during the fetch.
                        ;RUN	@WA -> CA
   8014   09            RUN	LDN WA
   8015   BA            	PHI CA
   8016   19            	INC WA
   8017   09            	LDN WA
   8018   AA            	PLO CA
   8019   19            	INC WA
                        ;	WA = WA + 2 (Implied with 2x INC WA above)
                        ;	CA -> PC
   801A   9A            	GHI CA
   801B   BF            	PHI PC
   801C   8A            	GLO CA
   801D   AF            	PLO PC
                        	; setting the program counter will jump to the primitive.
                        	; When the routine completes, it should SEP NXT
                        	; Causing the called routine to return to the NEXT
                        	; Entry Point
   801E   DF            	SEP PC
                        ;COLON	PSH I -> RS
   801F   2C            	DEC RS
   8020   88            	GLO I
   8021   5C            	STR RS
   8022   2C            	DEC RS
   8023   98            	GHI I
   8024   5C            	STR RS
                        ;	WA -> I
   8025   89            	GLO WA
   8026   A8            	PLO I
   8027   99            	GHI WA
   8028   B8            	PHI I
                        ;	JMP NEXT ; should be in a register for SEP instruction.
   8029   30 0E         	BR NEXT
                        
                        ;	7E
                        ;	XE
                        ;	LA  ; Link Address to Next dictionary entry.
                        ;	EXECUTE	LA
                        ;	Dictionary Entry.
   802B   07 45 58 45   	DB 7,'E','X','E'
   802F   00 00         	DW 0
   8031   80 33         EXECUTE	DW $+2
                        ;	POP SP -> WA
                        ; Pop from stack pops high order, inc sp, pop low order, inc sp
   8033   0D            	LDN SP  ; take byte at M(RS), copy to D (accumulator)
   8034   B9            	PHI WA   ; put D into I High 
   8035   1D            	INC SP	; RS++
   8036   0D            	LDN SP	; take byte at M(RS), copy to D
   8037   A9            	PLO WA	; put D into I Low.
   8038   1D            	INC SP  ; RS++
                        ;	JMP RUN
   8039   30 14         	BR RUN
                        
                        
                        
   803B                 	END
000a  CA            8031  EXECUTE       0008  I             800e  NEXT      
0006  NXT           000f  PC            000c  RS            8014  RUN       
8006  SEMI          000d  SP            0009  WA            
