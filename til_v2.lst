                        ;******************************************
                        ;
                        ; TIL - Threaded Interpretive Language
                        ;   1802 Implementation
                        ;   2023 Kelly S. Loyd
                        ;
                        ;******************************************
                        
                        ; Register list
                        ; I = Instruction Register - Address of next Instruction in threaded list of current secondary.
                        ; WA = Word Address Register - Word address of current keyword.
                        ; CA = Code Address register
                        ; RS = Return Stack
                        ; SP = Stack Pointer
                        ; PC = Program Conter
                        
                        ; 1802 register map
                        ; Monitor uses R1, R2, R3, R4, R5, R7, RE
                        
   0008                 I	EQU	08H
   0009                 WA	EQU	09H
   000A                 CA	EQU	0AH
   000C                 RS	EQU	0CH
   000D                 SP	EQU	0DH
   000F                 PC	EQU	0FH
                        
                        ; Set at 0x8000 - RAM starts here on MC with ROM at 0x0000
   8000                 	ORG	$8000	
                        
                        ;
                        ; TIL code for Inner Interpreter
                        ; All the VM code (Pseudo-Code) is commented with ;
                        ; the addresses are based on ORG $100
                        ;0100	SEMI	0102
   8000   80 02         SEMI	DW	$+2	; This funny notation means put the address of SEMI+2 into the code here.
                        			; It forms the Link Address used to connect dictonary entries.
                        ;0102		POP RS -> I
                        ; POP : M(RS) copied to I register, RS=RS+2
                        ; *IMPORTANT* Endian-ness.. Push to stack pushes low order, dec sp, pushes high order, dec sp
                        ; Pop from stack pops high order, inc sp, pop low order, inc sp
   8002   0C            	LDN RS  ; take byte at M(RS), copy to D (accumulator)
   8003   B8            	PHI I   ; put D into I High 
   8004   1C            	INC RS	; RS++
   8005   0C            	LDN RS	; take byte at M(RS), copy to D
   8006   A8            	PLO I	; put D into I Low.
   8007   1C            	INC RS  ; RS++
                        
                        ;0104	NEXT	@I -> WA
                        ; M(I) -> WA.H, I++, M(I) -> WA.L, I++
   8008   08            NEXT	LDN I
   8009   B9            	PHI WA
   800A   18            	INC I
   800B   08            	LDN I
   800C   A9            	PLO WA
   800D   18            	INC I
                        ;0106		I = I + 2 ;; implied during the fetch.
                        ;0108	RUN	@WA -> CA
   800E   09            RUN	LDN WA
   800F   BA            	PHI CA
   8010   19            	INC WA
   8011   09            	LDN WA
   8012   AA            	PLO CA
   8013   19            	INC WA
                        ;010A		WA = WA + 2
                        ;010C		CA -> PC
   8014   9A            	GHI CA
   8015   BF            	PHI PC
   8016   8A            	GLO CA
   8017   AF            	PLO PC
                        ; setting the program counter should cause a jump - returning should probably be RS?
   8018   DF            	SEP PC
                        ;0140	COLON	PSH I -> RS
   8019   2C            	DEC RS
   801A   88            	GLO I
   801B   5C            	STR RS
   801C   2C            	DEC RS
   801D   98            	GHI I
   801E   5C            	STR RS
                        ;0142		WA -> I
   801F   89            	GLO WA
   8020   A8            	PLO I
   8021   99            	GHI WA
   8022   B8            	PHI I
                        ;0144		JMP NEXT
   8023   30 08         	BR NEXT
                        ;0146
                        
                        ;0050		7E
                        ;0052		XE
                        ;0054		LA  ; Link Address to Next dictionary entry.
                        ;0056	EXECUTE	0058
                        ;0058		POP SP -> WA
                        ;005A		JMP
                        ;005C		0108
                        
                        
                        
                        
                        
   8025                 		END
000a  CA            0008  I             8008  NEXT          000f  PC        
000c  RS            800e  RUN           8000  SEMI          000d  SP        
0009  WA            
